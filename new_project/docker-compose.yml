version: "3.3"
services:
  fuseki:
    container_name: fuseki
    image: blankdots/jena-fuseki
    environment:
      - ADMIN_PASSWORD=admin
    ports:
      - 3030:3030
    volumes:
      - ./volumes/fuseki:/staging
    restart: on-failure
    networks:
      - app
  webapp:
    container_name: webapp
    build: ./frontend
    ports:
      - 4200:4200
    volumes:
      - ./volumes/web-service:/data
    restart: on-failure
    networks:
      - app
  middleware:
    container_name: middleware
    build: ./backend
    ports:
      - 8080:8080
    depends_on:
      - fuseki
    restart: on-failure
    networks:
      - app
    # postgres database
  backendnode:
    container_name: backendnode
    build: ./backendnode
    ports:
      - 8010:8010
    volumes:
      - ./volumes/backendnode:/data
    restart: on-failure
    networks:
      - app
  postgres:
    image: postgres:12.3
    container_name: postgres
    environment:
      - POSTGRES_DB=admin
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_HOST_AUTH_METHOD=trust # allow all connections without a password. This is *not* recommended for prod
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
    restart: always
    ports:
      - '5432:5432'
    networks:
      - app
      
 # pgadmin for managing postgis db (runs at localhost:5050)
  # To add the above postgres server to pgadmin, use hostname as defined by docker: 'postgres'
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - '5050:5050'
    restart: on-failure
    networks:
      - app
networks:
  app: {}


#new_project_backend ->
#blankdots/jena-fuseki->
#docker network connect new_project_app backend
#docker network connect new_project_app fuseki
#docker network connect new_project_app webservice
#
# docker inspect network new_project_app

#docker-compose build backend
#
# docker stop $(docker ps -a -q)
# docker rm $(docker ps -a -q)

# docker network prune
#
#docker run -itd  --network my_network backend
#docker run -itd  --network my_network fuseki
#docker run -itd  --network my_network webservice
#
#
#new_project_web-service -> docker run -itd --name webservice -p 4200:4200 --network my_network new_project_web-service ash

#docker run -d --name dev-postgres -e POSTGRES_PASSWORD=Pass2020! -v /postgres-data:/var/lib/postgresql/data -p 5432:5432 postgres
